import * as tslib_1 from "tslib";
var OrderByPipe_1;
import { Pipe } from '@angular/core';
import { extractDeepPropertyByMapKey, isString, isUndefined } from '../helpers/helpers';
let OrderByPipe = OrderByPipe_1 = class OrderByPipe {
    static simpleSort(a, b) {
        return isString(a) && isString(b) ? a.toLowerCase().localeCompare(b.toLowerCase()) : a - b;
    }
    static orderCompare(prop, asc, a, b) {
        const first = extractDeepPropertyByMapKey(a, prop);
        const second = extractDeepPropertyByMapKey(b, prop);
        if (first === second) {
            return 0;
        }
        if (isUndefined(first) || first === '') {
            return 1;
        }
        if (isUndefined(second) || second === '') {
            return -1;
        }
        if (isString(first) && isString(second)) {
            const pos = first.toLowerCase().localeCompare(second.toLowerCase());
            return asc ? pos : -pos;
        }
        return asc ? first - second : second - first;
    }
    static extractFromConfig(config) {
        const sign = config.substr(0, 1);
        const prop = config.replace(/^[-+]/, '');
        const asc = sign !== '-';
        return [prop, asc, sign];
    }
    transform(input, config) {
        if (!Array.isArray(input)) {
            return input;
        }
        const out = [...input];
        // sort by multiple properties
        if (Array.isArray(config)) {
            return out.sort((a, b) => {
                const l = config.length;
                for (let i = 0; i < l; ++i) {
                    const [prop, asc] = OrderByPipe_1.extractFromConfig(config[i]);
                    const pos = OrderByPipe_1.orderCompare(prop, asc, a, b);
                    if (pos !== 0) {
                        return pos;
                    }
                }
                return 0;
            });
        }
        // sort by a single property value
        if (isString(config)) {
            const [prop, asc, sign] = OrderByPipe_1.extractFromConfig(config);
            if (config.length === 1) {
                // tslint:disable-next-line:switch-default
                switch (sign) {
                    case '+':
                        return out.sort(OrderByPipe_1.simpleSort.bind(this));
                    case '-':
                        return out.sort(OrderByPipe_1.simpleSort.bind(this)).reverse();
                }
            }
            return out.sort(OrderByPipe_1.orderCompare.bind(this, prop, asc));
        }
        // default sort by value
        return out.sort(OrderByPipe_1.simpleSort.bind(this));
    }
};
OrderByPipe = OrderByPipe_1 = tslib_1.__decorate([
    Pipe({ name: 'orderBy' })
], OrderByPipe);
export { OrderByPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItYnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHJ5L3BpcGVzLyIsInNvdXJjZXMiOlsiYXJyYXkvb3JkZXItYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBR3hGLElBQWEsV0FBVyxtQkFBeEIsTUFBYSxXQUFXO0lBRWQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFNLEVBQUUsQ0FBTTtRQUN0QyxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0YsQ0FBQztJQUVPLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBWSxFQUFFLEdBQVksRUFBRSxDQUFNLEVBQUUsQ0FBTTtRQUNwRSxNQUFNLEtBQUssR0FBRywyQkFBMkIsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkQsTUFBTSxNQUFNLEdBQUcsMkJBQTJCLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXBELElBQUksS0FBSyxLQUFLLE1BQU0sRUFBRTtZQUNwQixPQUFPLENBQUMsQ0FBQztTQUNWO1FBRUQsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUUsRUFBRTtZQUN0QyxPQUFPLENBQUMsQ0FBQztTQUNWO1FBRUQsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxLQUFLLEVBQUUsRUFBRTtZQUN4QyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ1g7UUFFRCxJQUFJLFFBQVEsQ0FBQyxL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RyxDQUFDLElBQUksQ0FBQyxhQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7Q0FDRixDQUFBO0FBckZZLFdBQVc7SUFEdkIsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDO0dBQ2IsV0FBVyxDQXFGdkI7U0FyRlksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleSwgaXNTdHJpbmcsIGlzVW5kZWZpbmVkIH0gZnJvbSAnLi4vaGVscGVycy9oZWxwZXJzJztcblxuQFBpcGUoeyBuYW1lOiAnb3JkZXJCeScgfSlcbmV4cG9ydCBjbGFzcyBPcmRlckJ5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gIHByaXZhdGUgc3RhdGljIHNpbXBsZVNvcnQoYTogYW55LCBiOiBhbnkpIHtcbiAgICByZXR1cm4gaXNTdHJpbmcoYSkgJiYgaXNTdHJpbmcoYikgPyBhLnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZShiLnRvTG93ZXJDYXNlKCkpIDogYSAtIGI7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBvcmRlckNvbXBhcmUocHJvcDogc3RyaW5nLCBhc2M6IGJvb2xlYW4sIGE6IGFueSwgYjogYW55KSB7XG4gICAgY29uc3QgZmlyc3QgPSBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkoYSwgcHJvcCk7XG4gICAgY29uc3Qgc2Vjb25kID0gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5KGIsIHByb3ApO1xuXG4gICAgaWYgKGZpcnN0ID09PSBzZWNvbmQpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGlmIChpc1VuZGVmaW5lZChmaXJzdCkgfHwgZmlyc3QgPT09ICcnKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICBpZiAoaXNVbmRlZmluZWQoc2Vjb25kKSB8fCBzZWNvbmQgPT09ICcnKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgaWYgKGlzU3RyaW5nKGZpcnN0KSAmJiBpc1N0cmluZyhzZWNvbmQpKSB7XG4gICAgICBjb25zdCBwb3MgPSBmaXJzdC50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoc2Vjb25kLnRvTG93ZXJDYXNlKCkpO1xuXG4gICAgICByZXR1cm4gYXNjID8gcG9zIDogLXBvcztcbiAgICB9XG5cbiAgICByZXR1cm4gYXNjID8gZmlyc3QgLSBzZWNvbmQgOiBzZWNvbmQgLSBmaXJzdDtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGV4dHJhY3RGcm9tQ29uZmlnKGNvbmZpZzogYW55KSB7XG4gICAgY29uc3Qgc2lnbiA9IGNvbmZpZy5zdWJzdHIoMCwgMSk7XG4gICAgY29uc3QgcHJvcCA9IGNvbmZpZy5yZXBsYWNlKC9eWy0rXS8sICcnKTtcbiAgICBjb25zdCBhc2MgPSBzaWduICE9PSAnLSc7XG5cbiAgICByZXR1cm4gW3Byb3AsIGFzYywgc2lnbl07XG4gIH1cblxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueVtdLCBjb25maWc/OiBhbnkpOiBhbnlbXTtcbiAgdHJhbnNmb3JtPFQ+KGlucHV0OiBULCBjb25maWc/OiBhbnkpOiBUO1xuXG4gIHRyYW5zZm9ybShpbnB1dDogYW55LCBjb25maWc/OiBhbnkpOiBhbnkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcbiAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICBjb25zdCBvdXQgPSBbLi4uaW5wdXRdO1xuXG4gICAgLy8gc29ydCBieSBtdWx0aXBsZSBwcm9wZXJ0aWVzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZmlnKSkge1xuICAgICAgcmV0dXJuIG91dC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIGNvbnN0IGwgPSBjb25maWcubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7ICsraSkge1xuICAgICAgICAgIGNvbnN0IFtwcm9wLCBhc2NdID0gT3JkZXJCeVBpcGUuZXh0cmFjdEZyb21Db25maWcoY29uZmlnW2ldKTtcbiAgICAgICAgICBjb25zdCBwb3MgPSBPcmRlckJ5UGlwZS5vcmRlckNvbXBhcmUocHJvcCwgYXNjLCBhLCBiKTtcbiAgICAgICAgICBpZiAocG9zICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gc29ydCBieSBhIHNpbmdsZSBwcm9wZXJ0eSB2YWx1ZVxuICAgIGlmIChpc1N0cmluZyhjb25maWcpKSB7XG4gICAgICBjb25zdCBbcHJvcCwgYXNjLCBzaWduXSA9IE9yZGVyQnlQaXBlLmV4dHJhY3RGcm9tQ29uZmlnKGNvbmZpZyk7XG5cbiAgICAgIGlmIChjb25maWcubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzd2l0Y2gtZGVmYXVsdFxuICAgICAgICBzd2l0Y2ggKHNpZ24pIHtcbiAgICAgICAgICBjYXNlICcrJzpcbiAgICAgICAgICAgIHJldHVybiBvdXQuc29ydChPcmRlckJ5UGlwZS5zaW1wbGVTb3J0LmJpbmQodGhpcykpO1xuICAgICAgICAgIGNhc2UgJy0nOlxuICAgICAgICAgICAgcmV0dXJuIG91dC5zb3J0KE9yZGVyQnlQaXBlLnNpbXBsZVNvcnQuYmluZCh0aGlzKSkucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvdXQuc29ydChPcmRlckJ5UGlwZS5vcmRlckNvbXBhcmUuYmluZCh0aGlzLCBwcm9wLCBhc2MpKTtcbiAgICB9XG5cbiAgICAvLyBkZWZhdWx0IHNvcnQgYnkgdmFsdWVcbiAgICByZXR1cm4gb3V0LnNvcnQoT3JkZXJCeVBpcGUuc2ltcGxlU29ydC5iaW5kKHRoaXMpKTtcbiAgfVxufVxuIl19