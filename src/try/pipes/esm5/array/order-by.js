import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { extractDeepPropertyByMapKey, isString, isUndefined } from '../helpers/helpers';
var OrderByPipe = /** @class */ (function () {
    function OrderByPipe() {
    }
    OrderByPipe_1 = OrderByPipe;
    OrderByPipe.simpleSort = function (a, b) {
        return isString(a) && isString(b) ? a.toLowerCase().localeCompare(b.toLowerCase()) : a - b;
    };
    OrderByPipe.orderCompare = function (prop, asc, a, b) {
        var first = extractDeepPropertyByMapKey(a, prop);
        var second = extractDeepPropertyByMapKey(b, prop);
        if (first === second) {
            return 0;
        }
        if (isUndefined(first) || first === '') {
            return 1;
        }
        if (isUndefined(second) || second === '') {
            return -1;
        }
        if (isString(first) && isString(second)) {
            var pos = first.toLowerCase().localeCompare(second.toLowerCase());
            return asc ? pos : -pos;
        }
        return asc ? first - second : second - first;
    };
    OrderByPipe.extractFromConfig = function (config) {
        var sign = config.substr(0, 1);
        var prop = config.replace(/^[-+]/, '');
        var asc = sign !== '-';
        return [prop, asc, sign];
    };
    OrderByPipe.prototype.transform = function (input, config) {
        if (!Array.isArray(input)) {
            return input;
        }
        var out = tslib_1.__spread(input);
        // sort by multiple properties
        if (Array.isArray(config)) {
            return out.sort(function (a, b) {
                var l = config.length;
                for (var i = 0; i < l; ++i) {
                    var _a = tslib_1.__read(OrderByPipe_1.extractFromConfig(config[i]), 2), prop = _a[0], asc = _a[1];
                    var pos = OrderByPipe_1.orderCompare(prop, asc, a, b);
                    if (pos !== 0) {
                        return pos;
                    }
                }
                return 0;
            });
        }
        // sort by a single property value
        if (isString(config)) {
            var _a = tslib_1.__read(OrderByPipe_1.extractFromConfig(config), 3), prop = _a[0], asc = _a[1], sign = _a[2];
            if (config.length === 1) {
                // tslint:disable-next-line:switch-default
                switch (sign) {
                    case '+':
                        return out.sort(OrderByPipe_1.simpleSort.bind(this));
                    case '-':
                        return out.sort(OrderByPipe_1.simpleSort.bind(this)).reverse();
                }
            }
            return out.sort(OrderByPipe_1.orderCompare.bind(this, prop, asc));
        }
        // default sort by value
        return out.sort(OrderByPipe_1.simpleSort.bind(this));
    };
    var OrderByPipe_1;
    OrderByPipe = OrderByPipe_1 = tslib_1.__decorate([
        Pipe({ name: 'orderBy' })
    ], OrderByPipe);
    return OrderByPipe;
}());
export { OrderByPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItYnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdHJ5L3BpcGVzLyIsInNvdXJjZXMiOlsiYXJyYXkvb3JkZXItYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHeEY7SUFBQTtJQXFGQSxDQUFDO29CQXJGWSxXQUFXO0lBRVAsc0JBQVUsR0FBekIsVUFBMEIsQ0FBTSxFQUFFLENBQU07UUFDdEMsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdGLENBQUM7SUFFYyx3QkFBWSxHQUEzQixVQUE0QixJQUFZLEVBQUUsR0FBWSxFQUFFLENBQU0sRUFBRSxDQUFNO1FBQ3BFLElBQU0sS0FBSyxHQUFHLDJCQUEyQixDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuRCxJQUFNLE1BQU0sR0FBRywyQkFBMkIsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFcEQsSUFBSSxLQUFLLEtBQUssTUFBTSxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7UUFFRCxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRSxFQUFFO1lBQ3RDLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7UUFFRCxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLEtBQUssRUFBRSxFQUFFO1lBQ3hDLE9BQU8sQ0FBQyxDQUFDLENBQUM7U0FDWDtRQUVELElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN2QyxJQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1lBRXBFLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1NBQ3pCO1FBRUQsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDL0MsQ0FBQztJQUVjLDZCQUFpQixHQUFoQyxVQUFpQyxNQUFXO1FBQzFDLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLElBQU0sR0FBRyxHQUFHLElBQUksS0FBSyxHQUFHLENBQUM7UUFFekIsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUtELCtCQUFTLEdBQVQsVUFBVSxLQUFVLEVBQUUsTUFBWTtRQUNoQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN6QixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsSUFBTSxHQUFHLG9CQUFPLEtBQUssQ0FBQyxDQUFDO1FBRXZCLDhCQUE4QjtRQUM5QixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDekIsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ25CLElBQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7Z0JBQ3hCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7b0JBQ3BCLElBQUEsa0VBQXNELEVBQXJELFlBQUksRUFBRSxXQUErQyxDQUFDO29CQUM3RCxJQUFNLEdBQUcsR0FBRyxhQUFXLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUN0RCxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUU7d0JBQ2IsT0FBTyxHQUFHLENBQUM7cUJBQ1o7aUJBQ0Y7Z0JBRUQsT0FBTyxDQUFDLENBQUM7WUFDWCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsa0NBQWtDO1FBQ2xDLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2QsSUFBQSwrREFBeUQsRUFBeEQsWUFBSSxFQUFFLFdBQUcsRUFBRSxZQUE2QyxDQUFDO1lBRWhFLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ3ZCLDBDQUEwQztnQkFDMUMsUUFBUSxJQUFJLEVBQUU7b0JBQ1osS0FBSyxHQUFHO3dCQUNOLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUNyRCxLQUFLLEdBQUc7d0JBQ04sT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7aUJBQ2hFO2FBQ0Y7WUFFRCxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBVyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2pFO1FBRUQsd0JBQXdCO1FBQ3hCLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7O0lBcEZVLFdBQVc7UUFEdkIsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDO09BQ2IsV0FBVyxDQXFGdkI7SUFBRCxrQkFBQztDQUFBLEFBckZELElBcUZDO1NBckZZLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXksIGlzU3RyaW5nLCBpc1VuZGVmaW5lZCB9IGZyb20gJy4uL2hlbHBlcnMvaGVscGVycyc7XG5cbkBQaXBlKHsgbmFtZTogJ29yZGVyQnknIH0pXG5leHBvcnQgY2xhc3MgT3JkZXJCeVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICBwcml2YXRlIHN0YXRpYyBzaW1wbGVTb3J0KGE6IGFueSwgYjogYW55KSB7XG4gICAgcmV0dXJuIGlzU3RyaW5nKGEpICYmIGlzU3RyaW5nKGIpID8gYS50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoYi50b0xvd2VyQ2FzZSgpKSA6IGEgLSBiO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgb3JkZXJDb21wYXJlKHByb3A6IHN0cmluZywgYXNjOiBib29sZWFuLCBhOiBhbnksIGI6IGFueSkge1xuICAgIGNvbnN0IGZpcnN0ID0gZXh0cmFjdERlZXBQcm9wZXJ0eUJ5TWFwS2V5KGEsIHByb3ApO1xuICAgIGNvbnN0IHNlY29uZCA9IGV4dHJhY3REZWVwUHJvcGVydHlCeU1hcEtleShiLCBwcm9wKTtcblxuICAgIGlmIChmaXJzdCA9PT0gc2Vjb25kKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBpZiAoaXNVbmRlZmluZWQoZmlyc3QpIHx8IGZpcnN0ID09PSAnJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgaWYgKGlzVW5kZWZpbmVkKHNlY29uZCkgfHwgc2Vjb25kID09PSAnJykge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIGlmIChpc1N0cmluZyhmaXJzdCkgJiYgaXNTdHJpbmcoc2Vjb25kKSkge1xuICAgICAgY29uc3QgcG9zID0gZmlyc3QudG9Mb3dlckNhc2UoKS5sb2NhbGVDb21wYXJlKHNlY29uZC50b0xvd2VyQ2FzZSgpKTtcblxuICAgICAgcmV0dXJuIGFzYyA/IHBvcyA6IC1wb3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFzYyA/IGZpcnN0IC0gc2Vjb25kIDogc2Vjb25kIC0gZmlyc3Q7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBleHRyYWN0RnJvbUNvbmZpZyhjb25maWc6IGFueSkge1xuICAgIGNvbnN0IHNpZ24gPSBjb25maWcuc3Vic3RyKDAsIDEpO1xuICAgIGNvbnN0IHByb3AgPSBjb25maWcucmVwbGFjZSgvXlstK10vLCAnJyk7XG4gICAgY29uc3QgYXNjID0gc2lnbiAhPT0gJy0nO1xuXG4gICAgcmV0dXJuIFtwcm9wLCBhc2MsIHNpZ25dO1xuICB9XG5cbiAgdHJhbnNmb3JtKGlucHV0OiBhbnlbXSwgY29uZmlnPzogYW55KTogYW55W107XG4gIHRyYW5zZm9ybTxUPihpbnB1dDogVCwgY29uZmlnPzogYW55KTogVDtcblxuICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgY29uZmlnPzogYW55KTogYW55IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuXG4gICAgY29uc3Qgb3V0ID0gWy4uLmlucHV0XTtcblxuICAgIC8vIHNvcnQgYnkgbXVsdGlwbGUgcHJvcGVydGllc1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbmZpZykpIHtcbiAgICAgIHJldHVybiBvdXQuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBjb25zdCBsID0gY29uZmlnLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICBjb25zdCBbcHJvcCwgYXNjXSA9IE9yZGVyQnlQaXBlLmV4dHJhY3RGcm9tQ29uZmlnKGNvbmZpZ1tpXSk7XG4gICAgICAgICAgY29uc3QgcG9zID0gT3JkZXJCeVBpcGUub3JkZXJDb21wYXJlKHByb3AsIGFzYywgYSwgYik7XG4gICAgICAgICAgaWYgKHBvcyAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIHNvcnQgYnkgYSBzaW5nbGUgcHJvcGVydHkgdmFsdWVcbiAgICBpZiAoaXNTdHJpbmcoY29uZmlnKSkge1xuICAgICAgY29uc3QgW3Byb3AsIGFzYywgc2lnbl0gPSBPcmRlckJ5UGlwZS5leHRyYWN0RnJvbUNvbmZpZyhjb25maWcpO1xuXG4gICAgICBpZiAoY29uZmlnLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6c3dpdGNoLWRlZmF1bHRcbiAgICAgICAgc3dpdGNoIChzaWduKSB7XG4gICAgICAgICAgY2FzZSAnKyc6XG4gICAgICAgICAgICByZXR1cm4gb3V0LnNvcnQoT3JkZXJCeVBpcGUuc2ltcGxlU29ydC5iaW5kKHRoaXMpKTtcbiAgICAgICAgICBjYXNlICctJzpcbiAgICAgICAgICAgIHJldHVybiBvdXQuc29ydChPcmRlckJ5UGlwZS5zaW1wbGVTb3J0LmJpbmQodGhpcykpLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3V0LnNvcnQoT3JkZXJCeVBpcGUub3JkZXJDb21wYXJlLmJpbmQodGhpcywgcHJvcCwgYXNjKSk7XG4gICAgfVxuXG4gICAgLy8gZGVmYXVsdCBzb3J0IGJ5IHZhbHVlXG4gICAgcmV0dXJuIG91dC5zb3J0KE9yZGVyQnlQaXBlLnNpbXBsZVNvcnQuYmluZCh0aGlzKSk7XG4gIH1cbn1cbiJdfQ==