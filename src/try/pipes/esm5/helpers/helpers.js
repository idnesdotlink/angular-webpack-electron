import * as tslib_1 from "tslib";
export function isUndefined(value) {
    return typeof value === 'undefined';
}
export function isFunction(value) {
    return typeof value === 'function';
}
export function isNumber(value) {
    return typeof value === 'number';
}
export function isString(value) {
    return typeof value === 'string';
}
export function isBoolean(value) {
    return typeof value === 'boolean';
}
export function isObject(value) {
    return value !== null && typeof value === 'object';
}
export function isNumberFinite(value) {
    return isNumber(value) && isFinite(value);
}
export function isVowel(letter) {
    var vowels = ['a', 'e', 'i', 'o', 'u'];
    return vowels.indexOf(letter) !== -1;
}
export function applyPrecision(num, precision) {
    if (precision <= 0) {
        return Math.round(num);
    }
    var tho = Math.pow(10, precision);
    return Math.round(num * tho) / tho;
}
export function extractDeepPropertyByMapKey(obj, map) {
    var keys = map.split('.');
    var head = keys.shift();
    return keys.reduce(function (prop, key) {
        return !isUndefined(prop) && !isUndefined(prop[key]) ? prop[key] : undefined;
    }, obj[head || '']);
}
export function extractDeepPropertyByParentMapKey(obj, map) {
    var keys = map.split('.');
    var tail = keys.pop();
    var props = extractDeepPropertyByMapKey(obj, keys.join('.'));
    return { props: props, tail: tail };
}
export function getKeysTwoObjects(obj, other) {
    return tslib_1.__spread(Object.keys(obj), Object.keys(other)).filter(function (key, index, array) { return array.indexOf(key) === index; });
}
export function isDeepEqual(obj, other) {
    if (!isObject(obj) || !isObject(other)) {
        return obj === other;
    }
    return getKeysTwoObjects(obj, other).every(function (key) {
        if (!isObject(obj[key]) && !isObject(other[key])) {
            return obj[key] === other[key];
        }
        if (!isObject(obj[key]) || !isObject(other[key])) {
            return false;
        }
        return isDeepEqual(obj[key], other[key]);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0cnkvcGlwZXMvIiwic291cmNlcyI6WyJoZWxwZXJzL2hlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sVUFBVSxXQUFXLENBQUMsS0FBVTtJQUNwQyxPQUFPLE9BQU8sS0FBSyxLQUFLLFdBQVcsQ0FBQztBQUN0QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxLQUFVO0lBQ25DLE9BQU8sT0FBTyxLQUFLLEtBQUssVUFBVSxDQUFDO0FBQ3JDLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEtBQVU7SUFDakMsT0FBTyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUM7QUFDbkMsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQUMsS0FBVTtJQUNqQyxPQUFPLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQztBQUNuQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxLQUFVO0lBQ2xDLE9BQU8sT0FBTyxLQUFLLEtBQUssU0FBUyxDQUFDO0FBQ3BDLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEtBQVU7SUFDakMsT0FBTyxLQUFLLEtBQUssSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQztBQUNyRCxDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxLQUFVO0lBQ3ZDLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRUQsTUFBTSxVQUFVLE9BQU8sQ0FBQyxNQUFjO0lBQ3BDLElBQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRXpDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBRUQsTUFBTSxV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InNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlcih2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWU6IGFueSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZTogYW55KSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlOiBhbnkpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlckZpbml0ZSh2YWx1ZTogYW55KSB7XG4gIHJldHVybiBpc051bWJlcih2YWx1ZSkgJiYgaXNGaW5pdGUodmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNWb3dlbChsZXR0ZXI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCB2b3dlbHMgPSBbJ2EnLCAnZScsICdpJywgJ28nLCAndSddO1xuXG4gIHJldHVybiB2b3dlbHMuaW5kZXhPZihsZXR0ZXIpICE9PSAtMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UHJlY2lzaW9uKG51bTogbnVtYmVyLCBwcmVjaXNpb246IG51bWJlcikge1xuICBpZiAocHJlY2lzaW9uIDw9IDApIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChudW0pO1xuICB9XG5cbiAgY29uc3QgdGhvID0gMTAgKiogcHJlY2lzaW9uO1xuXG4gIHJldHVybiBNYXRoLnJvdW5kKG51bSAqIHRobykgLyB0aG87XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkob2JqOiBhbnksIG1hcDogc3RyaW5nKTogYW55IHtcbiAgY29uc3Qga2V5cyA9IG1hcC5zcGxpdCgnLicpO1xuICBjb25zdCBoZWFkID0ga2V5cy5zaGlmdCgpO1xuXG4gIHJldHVybiBrZXlzLnJlZHVjZSgocHJvcDogYW55LCBrZXk6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiAhaXNVbmRlZmluZWQocHJvcCkgJiYgIWlzVW5kZWZpbmVkKHByb3Bba2V5XSkgPyBwcm9wW2tleV0gOiB1bmRlZmluZWQ7XG4gIH0sIG9ialtoZWFkIHx8ICcnXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0RGVlcFByb3BlcnR5QnlQYXJlbnRNYXBLZXkob2JqOiBhbnksIG1hcDogc3RyaW5nKTogYW55IHtcbiAgY29uc3Qga2V5cyA9IG1hcC5zcGxpdCgnLicpO1xuICBjb25zdCB0YWlsID0ga2V5cy5wb3AoKTtcbiAgY29uc3QgcHJvcHMgPSBleHRyYWN0RGVlcFByb3BlcnR5QnlNYXBLZXkob2JqLCBrZXlzLmpvaW4oJy4nKSk7XG5cbiAgcmV0dXJuIHsgcHJvcHMsIHRhaWwgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEtleXNUd29PYmplY3RzKG9iajogYW55LCBvdGhlcjogYW55KTogYW55IHtcbiAgcmV0dXJuIFsuLi5PYmplY3Qua2V5cyhvYmopLCAuLi5PYmplY3Qua2V5cyhvdGhlcildLmZpbHRlcigoa2V5LCBpbmRleCwgYXJyYXkpID0+IGFycmF5LmluZGV4T2Yoa2V5KSA9PT0gaW5kZXgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZWVwRXF1YWwob2JqOiBhbnksIG90aGVyOiBhbnkpOiBhbnkge1xuICBpZiAoIWlzT2JqZWN0KG9iaikgfHwgIWlzT2JqZWN0KG90aGVyKSkge1xuICAgIHJldHVybiBvYmogPT09IG90aGVyO1xuICB9XG5cbiAgcmV0dXJuIGdldEtleXNUd29PYmplY3RzKG9iaiwgb3RoZXIpLmV2ZXJ5KFxuICAgIChrZXk6IGFueSk6IGJvb2xlYW4gPT4ge1xuICAgICAgaWYgKCFpc09iamVjdChvYmpba2V5XSkgJiYgIWlzT2JqZWN0KG90aGVyW2tleV0pKSB7XG4gICAgICAgIHJldHVybiBvYmpba2V5XSA9PT0gb3RoZXJba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNPYmplY3Qob2JqW2tleV0pIHx8ICFpc09iamVjdChvdGhlcltrZXldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc0RlZXBFcXVhbChvYmpba2V5XSwgb3RoZXJba2V5XSk7XG4gICAgfVxuICApO1xufVxuIl19