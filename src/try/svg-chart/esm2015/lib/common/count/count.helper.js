// Robert Penner's easeOutExpo
function easeOutExpo(t, b, c, d) {
    return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;
}
/**
 * Counts from a number to the end incrementally.
 *
 * @export
 * @param {any} countFrom
 * @param {any} countTo
 * @param {any} countDecimals
 * @param {any} countDuration
 * @param {any} callback
 * @returns
 */
export function count(countFrom, countTo, countDecimals, countDuration, callback) {
    const startVal = Number(countFrom);
    const endVal = Number(countTo);
    const countDown = startVal > endVal;
    const decimals = Math.max(0, countDecimals);
    const dec = Math.pow(10, decimals);
    const duration = Number(countDuration) * 1000;
    let startTime;
    function runCount(timestamp) {
        let frameVal;
        const progress = timestamp - startTime;
        if (countDown) {
            frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);
        }
        else {
            frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);
        }
        if (countDown) {
            frameVal = frameVal < endVal ? endVal : frameVal;
        }
        else {
            frameVal = frameVal > endVal ? endVal : frameVal;
        }
        frameVal = Math.round(frameVal * dec) / dec;
        const tick = progress < duration;
        callback({
            value: frameVal,
            progress,
            timestamp,
            finished: !tick
        });
        if (tick) {
            return requestAnimationFrame(val => runCount(val));
        }
    }
    return requestAnimationFrame(timestamp => {
        startTime = timestamp;
        return runCount(timestamp);
    });
}
/**
 * Determine decimals places
 *
 * @export
 * @param {any} countTo
 * @returns
 */
export function decimalChecker(countTo) {
    const endVal = Number(countTo);
    if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {
        return 2;
    }
    return 0;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQuaGVscGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRyeS9zdmctY2hhcnQvIiwic291cmNlcyI6WyJsaWIvY29tbW9uL2NvdW50L2NvdW50LmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7QUFDOUIsU0FBUyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUM3QixPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7QUFDbkUsQ0FBQztBQUVEOzs7Ozs7Ozs7O0dBVUc7QUFDSCxNQUFNLFVBQVUsS0FBSyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxRQUFRO0lBQzlFLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNuQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0IsTUFBTSxTQUFTLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQztJQUNwQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM1QyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNuQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQzlDLElBQUksU0FBUyxDQUFDO0lBRWQsU0FBUyxRQUFRLENBQUMsU0FBUztRQUN6QixJQUFJLFFBQVEsQ0FBQztRQUNiLE1BQU0sUUFBUSxHQUFHLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFFdkMsSUFBSSxTQUFTLEVBQUU7WUFDYixRQUFRLEdBQUcsUUFBUSxHQUFHLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLFFBQVEsR0FBRyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDN0U7YUFBTTtZQUNMLFFBQVEsR0FBRyxXQUFXLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEdBQUcsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ3pFO1FBRUQsSUFBSSxTQUFTLEVBQUU7WUFDYixRQUFRLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7U0FDbEQ7YUFBTTtZQUNMLFFBQVEsR0FBRyxRQUFRLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztTQUNsRDtRQUVELFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFFNUMsTUFBTSxJQUFJLEdBQUcsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUNqQyxRQUFRLENBQUM7WUFDUCxLQUFLLEVBQUUsUUFBUTtZQUNmLFFBQVE7WUFDUixTQUFTO1lBQ1QsUUFBUSxFQUFFLENBQUMsSUFBSTtTQUNoQixDQUFDLENBQUM7UUFFSCxJQUFJLElBQUksRUFBRTtZQUNSLE9BQU8scUJBQXFCLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNwRDtJQUNILENBQUM7SUFFRCxPQUFPLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQ3ZDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDdEIsT0FBTyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDN0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxPQUFPO0lBQ3BDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUUvQixJQUFJLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFO1FBQzlDLE9BQU8sQ0FBQyxDQUFDO0tBQ1Y7SUFFRCxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBSb2JlcnQgUGVubmVyJ3MgZWFzZU91dEV4cG9cbmZ1bmN0aW9uIGVhc2VPdXRFeHBvKHQsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIChjICogKC1NYXRoLnBvdygyLCAoLTEwICogdCkgLyBkKSArIDEpICogMTAyNCkgLyAxMDIzICsgYjtcbn1cblxuLyoqXG4gKiBDb3VudHMgZnJvbSBhIG51bWJlciB0byB0aGUgZW5kIGluY3JlbWVudGFsbHkuXG4gKlxuICogQGV4cG9ydFxuICogQHBhcmFtIHthbnl9IGNvdW50RnJvbVxuICogQHBhcmFtIHthbnl9IGNvdW50VG9cbiAqIEBwYXJhbSB7YW55fSBjb3VudERlY2ltYWxzXG4gKiBAcGFyYW0ge2FueX0gY291bnREdXJhdGlvblxuICogQHBhcmFtIHthbnl9IGNhbGxiYWNrXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY291bnQoY291bnRGcm9tLCBjb3VudFRvLCBjb3VudERlY2ltYWxzLCBjb3VudER1cmF0aW9uLCBjYWxsYmFjaykge1xuICBjb25zdCBzdGFydFZhbCA9IE51bWJlcihjb3VudEZyb20pO1xuICBjb25zdCBlbmRWYWwgPSBOdW1iZXIoY291bnRUbyk7XG4gIGNvbnN0IGNvdW50RG93biA9IHN0YXJ0VmFsID4gZW5kVmFsO1xuICBjb25zdCBkZWNpbWFscyA9IE1hdGgubWF4KDAsIGNvdW50RGVjaW1hbHMpO1xuICBjb25zdCBkZWMgPSBNYXRoLnBvdygxMCwgZGVjaW1hbHMpO1xuICBjb25zdCBkdXJhdGlvbiA9IE51bWJlcihjb3VudER1cmF0aW9uKSAqIDEwMDA7XG4gIGxldCBzdGFydFRpbWU7XG5cbiAgZnVuY3Rpb24gcnVuQ291bnQodGltZXN0YW1wKSB7XG4gICAgbGV0IGZyYW1lVmFsO1xuICAgIGNvbnN0IHByb2dyZXNzID0gdGltZXN0YW1wIC0gc3RhcnRUaW1lO1xuXG4gICAgaWYgKGNvdW50RG93bikge1xuICAgICAgZnJhbWVWYWwgPSBzdGFydFZhbCAtIGVhc2VPdXRFeHBvKHByb2dyZXNzLCAwLCBzdGFydFZhbCAtIGVuZFZhbCwgZHVyYXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmcmFtZVZhbCA9IGVhc2VPdXRFeHBvKHByb2dyZXNzLCBzdGFydFZhbCwgZW5kVmFsIC0gc3RhcnRWYWwsIGR1cmF0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAoY291bnREb3duKSB7XG4gICAgICBmcmFtZVZhbCA9IGZyYW1lVmFsIDwgZW5kVmFsID8gZW5kVmFsIDogZnJhbWVWYWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZyYW1lVmFsID0gZnJhbWVWYWwgPiBlbmRWYWwgPyBlbmRWYWwgOiBmcmFtZVZhbDtcbiAgICB9XG5cbiAgICBmcmFtZVZhbCA9IE1hdGgucm91bmQoZnJhbWVWYWwgKiBkZWMpIC8gZGVjO1xuXG4gICAgY29uc3QgdGljayA9IHByb2dyZXNzIDwgZHVyYXRpb247XG4gICAgY2FsbGJhY2soe1xuICAgICAgdmFsdWU6IGZyYW1lVmFsLFxuICAgICAgcHJvZ3Jlc3MsXG4gICAgICB0aW1lc3RhbXAsXG4gICAgICBmaW5pc2hlZDogIXRpY2tcbiAgICB9KTtcblxuICAgIGlmICh0aWNrKSB7XG4gICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHZhbCA9PiBydW5Db3VudCh2YWwpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpbWVzdGFtcCA9PiB7XG4gICAgc3RhcnRUaW1lID0gdGltZXN0YW1wO1xuICAgIHJldHVybiBydW5Db3VudCh0aW1lc3RhbXApO1xuICB9KTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgZGVjaW1hbHMgcGxhY2VzXG4gKlxuICogQGV4cG9ydFxuICogQHBhcmFtIHthbnl9IGNvdW50VG9cbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNpbWFsQ2hlY2tlcihjb3VudFRvKSB7XG4gIGNvbnN0IGVuZFZhbCA9IE51bWJlcihjb3VudFRvKTtcblxuICBpZiAoZW5kVmFsICUgMSAhPT0gMCAmJiBNYXRoLmFicyhlbmRWYWwpIDw9IDEwKSB7XG4gICAgcmV0dXJuIDI7XG4gIH1cblxuICByZXR1cm4gMDtcbn1cbiJdfQ==