export function calculateViewDimensions({ width, height, margins, showXAxis = false, showYAxis = false, xAxisHeight = 0, yAxisWidth = 0, showXLabel = false, showYLabel = false, showLegend = false, legendType = 'ordinal', legendPosition = 'right', columns = 12 }) {
    let xOffset = margins[3];
    let chartWidth = width;
    let chartHeight = height - margins[0] - margins[2];
    let offset;
    if (showLegend && legendPosition === 'right') {
        if (legendType === 'ordinal') {
            columns -= 2;
        }
        else {
            columns -= 1;
        }
    }
    chartWidth = chartWidth * columns / 12;
    chartWidth = chartWidth - margins[1] - margins[3];
    if (showXAxis) {
        chartHeight -= 5;
        chartHeight -= xAxisHeight;
        if (showXLabel) {
            // text height + spacing between axis label and tick labels
            offset = 25 + 5;
            chartHeight -= offset;
        }
    }
    if (showYAxis) {
        chartWidth -= 5;
        chartWidth -= yAxisWidth;
        xOffset += yAxisWidth;
        xOffset += 10;
        if (showYLabel) {
            // text height + spacing between axis label and tick labels
            offset = 25 + 5;
            chartWidth -= offset;
            xOffset += offset;
        }
    }
    chartWidth = Math.max(0, chartWidth);
    chartHeight = Math.max(0, chartHeight);
    return {
        // tslint:disable-next-line: no-bitwise
        width: ~~chartWidth,
        // tslint:disable-next-line: no-bitwise
        height: ~~chartHeight,
        // tslint:disable-next-line: no-bitwise
        xOffset: ~~xOffset
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy1kaW1lbnNpb25zLmhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0cnkvc3ZnLWNoYXJ0LyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi92aWV3LWRpbWVuc2lvbnMuaGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxFQUN0QyxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxTQUFTLEdBQUcsS0FBSyxFQUFFLFNBQVMsR0FBRyxLQUFLLEVBQUUsV0FBVyxHQUFHLENBQUMsRUFDN0UsVUFBVSxHQUFHLENBQUMsRUFBRSxVQUFVLEdBQUcsS0FBSyxFQUFFLFVBQVUsR0FBRyxLQUFLLEVBQUUsVUFBVSxHQUFHLEtBQUssRUFDMUUsVUFBVSxHQUFHLFNBQVMsRUFBRSxjQUFjLEdBQUcsT0FBTyxFQUFFLE9BQU8sR0FBRyxFQUFFLEVBQy9EO0lBQ0MsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztJQUN2QixJQUFJLFdBQVcsR0FBRyxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRCxJQUFJLE1BQWMsQ0FBQztJQUVuQixJQUFJLFVBQVUsSUFBSSxjQUFjLEtBQUssT0FBTyxFQUFFO1FBQzVDLElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtZQUM1QixPQUFPLElBQUksQ0FBQyxDQUFDO1NBQ2Q7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDLENBQUM7U0FDZDtLQUNGO0lBRUQsVUFBVSxHQUFHLFVBQVUsR0FBRyxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBRXZDLFVBQVUsR0FBRyxVQUFVLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVsRCxJQUFJLFNBQVMsRUFBRTtRQUNiLFdBQVcsSUFBSSxDQUFDLENBQUM7UUFDakIsV0FBVyxJQUFJLFdBQVcsQ0FBQztRQUUzQixJQUFJLFVBQVUsRUFBRTtZQUNkLDJEQUEyRDtZQUMzRCxNQUFNLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNoQixXQUFXLElBQUksTUFBTSxDQUFDO1NBQ3ZCO0tBQ0Y7SUFFRCxJQUFJLFNBQVMsRUFBRTtRQUNiLFVBQVUsSUFBSSxDQUFDLENBQUM7UUFDaEIsVUFBVSxJQUFJLFVBQVUsQ0FBQztRQUN6QixPQUFPLElBQUksVUFBVSxDQUFDO1FBQ3RCLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFFZCxJQUFJLFVBQVUsRUFBRTtZQUNkLDJEQUEyRDtZQUMzRCxNQUFNLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNoQixVQUFVLElBQUksTUFBTSxDQUFDO1lBQ3JCLE9BQU8sSUFBSSxNQUFNLENBQUM7U0FDbkI7S0FDRjtJQUVELFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNyQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFdkMsT0FBTztRQUNMLHVDQUF1QztRQUN2QyxLQUFLLEVBQUUsQ0FBQyxDQUFDLFVBQVU7UUFDbkIsdUNBQXVDO1FBQ3ZDLE1BQU0sRUFBRSxDQUFDLENBQUMsV0FBVztRQUNyQix1Q0FBdUM7UUFDdkMsT0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFPO0tBQ25CLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBWaWV3RGltZW5zaW9ucyB7XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xuICB4T2Zmc2V0OiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVWaWV3RGltZW5zaW9ucyh7XG4gIHdpZHRoLCBoZWlnaHQsIG1hcmdpbnMsIHNob3dYQXhpcyA9IGZhbHNlLCBzaG93WUF4aXMgPSBmYWxzZSwgeEF4aXNIZWlnaHQgPSAwLFxuICB5QXhpc1dpZHRoID0gMCwgc2hvd1hMYWJlbCA9IGZhbHNlLCBzaG93WUxhYmVsID0gZmFsc2UsIHNob3dMZWdlbmQgPSBmYWxzZSxcbiAgbGVnZW5kVHlwZSA9ICdvcmRpbmFsJywgbGVnZW5kUG9zaXRpb24gPSAncmlnaHQnLCBjb2x1bW5zID0gMTJcbn0pOiBWaWV3RGltZW5zaW9ucyB7XG4gIGxldCB4T2Zmc2V0ID0gbWFyZ2luc1szXTtcbiAgbGV0IGNoYXJ0V2lkdGggPSB3aWR0aDtcbiAgbGV0IGNoYXJ0SGVpZ2h0ID0gaGVpZ2h0IC0gbWFyZ2luc1swXSAtIG1hcmdpbnNbMl07XG4gIGxldCBvZmZzZXQ6IG51bWJlcjtcblxuICBpZiAoc2hvd0xlZ2VuZCAmJiBsZWdlbmRQb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgIGlmIChsZWdlbmRUeXBlID09PSAnb3JkaW5hbCcpIHtcbiAgICAgIGNvbHVtbnMgLT0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgY29sdW1ucyAtPSAxO1xuICAgIH1cbiAgfVxuXG4gIGNoYXJ0V2lkdGggPSBjaGFydFdpZHRoICogY29sdW1ucyAvIDEyO1xuXG4gIGNoYXJ0V2lkdGggPSBjaGFydFdpZHRoIC0gbWFyZ2luc1sxXSAtIG1hcmdpbnNbM107XG5cbiAgaWYgKHNob3dYQXhpcykge1xuICAgIGNoYXJ0SGVpZ2h0IC09IDU7XG4gICAgY2hhcnRIZWlnaHQgLT0geEF4aXNIZWlnaHQ7XG5cbiAgICBpZiAoc2hvd1hMYWJlbCkge1xuICAgICAgLy8gdGV4dCBoZWlnaHQgKyBzcGFjaW5nIGJldHdlZW4gYXhpcyBsYWJlbCBhbmQgdGljayBsYWJlbHNcbiAgICAgIG9mZnNldCA9IDI1ICsgNTtcbiAgICAgIGNoYXJ0SGVpZ2h0IC09IG9mZnNldDtcbiAgICB9XG4gIH1cblxuICBpZiAoc2hvd1lBeGlzKSB7XG4gICAgY2hhcnRXaWR0aCAtPSA1O1xuICAgIGNoYXJ0V2lkdGggLT0geUF4aXNXaWR0aDtcbiAgICB4T2Zmc2V0ICs9IHlBeGlzV2lkdGg7XG4gICAgeE9mZnNldCArPSAxMDtcblxuICAgIGlmIChzaG93WUxhYmVsKSB7XG4gICAgICAvLyB0ZXh0IGhlaWdodCArIHNwYWNpbmcgYmV0d2VlbiBheGlzIGxhYmVsIGFuZCB0aWNrIGxhYmVsc1xuICAgICAgb2Zmc2V0ID0gMjUgKyA1O1xuICAgICAgY2hhcnRXaWR0aCAtPSBvZmZzZXQ7XG4gICAgICB4T2Zmc2V0ICs9IG9mZnNldDtcbiAgICB9XG4gIH1cblxuICBjaGFydFdpZHRoID0gTWF0aC5tYXgoMCwgY2hhcnRXaWR0aCk7XG4gIGNoYXJ0SGVpZ2h0ID0gTWF0aC5tYXgoMCwgY2hhcnRIZWlnaHQpO1xuXG4gIHJldHVybiB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1iaXR3aXNlXG4gICAgd2lkdGg6IH5+Y2hhcnRXaWR0aCxcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWJpdHdpc2VcbiAgICBoZWlnaHQ6IH5+Y2hhcnRIZWlnaHQsXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1iaXR3aXNlXG4gICAgeE9mZnNldDogfn54T2Zmc2V0XG4gIH07XG59XG4iXX0=