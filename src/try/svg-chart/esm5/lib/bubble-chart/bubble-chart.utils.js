import * as tslib_1 from "tslib";
import { scaleLinear, scalePoint, scaleTime } from 'd3-scale';
export function getDomain(values, scaleType, autoScale, minVal, maxVal) {
    var domain = [];
    if (scaleType === 'linear') {
        values = values.map(function (v) { return Number(v); });
        if (!autoScale) {
            values.push(0);
        }
    }
    if (scaleType === 'time' || scaleType === 'linear') {
        var min = minVal ? minVal : Math.min.apply(Math, tslib_1.__spread(values));
        var max = maxVal ? maxVal : Math.max.apply(Math, tslib_1.__spread(values));
        domain = [min, max];
    }
    else {
        domain = values;
    }
    return domain;
}
export function getScale(domain, range, scaleType, roundDomains) {
    var scale;
    if (scaleType === 'time') {
        scale = scaleTime()
            .range(range)
            .domain(domain);
    }
    else if (scaleType === 'linear') {
        scale = scaleLinear()
            .range(range)
            .domain(domain);
        if (roundDomains) {
            scale = scale.nice();
        }
    }
    else if (scaleType === 'ordinal') {
        scale = scalePoint()
            .range([range[0], range[1]])
            .domain(domain);
    }
    return scale;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnViYmxlLWNoYXJ0LnV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRyeS9zdmctY2hhcnQvIiwic291cmNlcyI6WyJsaWIvYnViYmxlLWNoYXJ0L2J1YmJsZS1jaGFydC51dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTlELE1BQU0sVUFBVSxTQUFTLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTyxFQUFFLE1BQU87SUFDcEUsSUFBSSxNQUFNLEdBQWEsRUFBRSxDQUFDO0lBQzFCLElBQUksU0FBUyxLQUFLLFFBQVEsRUFBRTtRQUMxQixNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBVCxDQUFTLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNoQjtLQUNGO0lBRUQsSUFBSSxTQUFTLEtBQUssTUFBTSxJQUFJLFNBQVMsS0FBSyxRQUFRLEVBQUU7UUFDbEQsSUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQVIsSUFBSSxtQkFBUSxNQUFNLEVBQUMsQ0FBQztRQUNsRCxJQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBUixJQUFJLG1CQUFRLE1BQU0sRUFBQyxDQUFDO1FBRWxELE1BQU0sR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUNyQjtTQUFNO1FBQ0wsTUFBTSxHQUFHLE1BQU0sQ0FBQztLQUNqQjtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLE1BQU0sRUFBRSxLQUFlLEVBQUUsU0FBUyxFQUFFLFlBQVk7SUFDdkUsSUFBSSxLQUFVLENBQUM7SUFFZixJQUFJLFNBQVMsS0FBSyxNQUFNLEVBQUU7UUFDeEIsS0FBSyxHQUFHLFNBQVMsRUFBRTthQUNoQixLQUFLLENBQUMsS0FBSyxDQUFDO2FBQ1osTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ25CO1NBQU0sSUFBSSxTQUFTLEtBQUssUUFBUSxFQUFFO1FBQ2pDLEtBQUssR0FBRyxXQUFXLEVBQUU7YUFDbEIsS0FBSyxDQUFDLEtBQUssQ0FBQzthQUNaLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVsQixJQUFJLFlBQVksRUFBRTtZQUNoQixLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3RCO0tBQ0Y7U0FBTSxJQUFJLFNBQVMsS0FBSyxTQUFTLEVBQUU7UUFDbEMsS0FBSyxHQUFHLFVBQVUsRUFBRTthQUNqQixLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDM0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ25CO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2NhbGVMaW5lYXIsIHNjYWxlUG9pbnQsIHNjYWxlVGltZSB9IGZyb20gJ2QzLXNjYWxlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldERvbWFpbih2YWx1ZXMsIHNjYWxlVHlwZSwgYXV0b1NjYWxlLCBtaW5WYWw/LCBtYXhWYWw/KTogbnVtYmVyW10ge1xuICAgIGxldCBkb21haW46IG51bWJlcltdID0gW107XG4gICAgaWYgKHNjYWxlVHlwZSA9PT0gJ2xpbmVhcicpIHtcbiAgICAgIHZhbHVlcyA9IHZhbHVlcy5tYXAodiA9PiBOdW1iZXIodikpO1xuICAgICAgaWYgKCFhdXRvU2NhbGUpIHtcbiAgICAgICAgdmFsdWVzLnB1c2goMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNjYWxlVHlwZSA9PT0gJ3RpbWUnIHx8IHNjYWxlVHlwZSA9PT0gJ2xpbmVhcicpIHtcbiAgICAgIGNvbnN0IG1pbiA9IG1pblZhbCA/IG1pblZhbCA6IE1hdGgubWluKC4uLnZhbHVlcyk7XG4gICAgICBjb25zdCBtYXggPSBtYXhWYWwgPyBtYXhWYWwgOiBNYXRoLm1heCguLi52YWx1ZXMpO1xuXG4gICAgICBkb21haW4gPSBbbWluLCBtYXhdO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb21haW4gPSB2YWx1ZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRvbWFpbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjYWxlKGRvbWFpbiwgcmFuZ2U6IG51bWJlcltdLCBzY2FsZVR5cGUsIHJvdW5kRG9tYWlucyk6IGFueSB7XG4gIGxldCBzY2FsZTogYW55O1xuXG4gIGlmIChzY2FsZVR5cGUgPT09ICd0aW1lJykge1xuICAgIHNjYWxlID0gc2NhbGVUaW1lKClcbiAgICAgIC5yYW5nZShyYW5nZSlcbiAgICAgIC5kb21haW4oZG9tYWluKTtcbiAgfSBlbHNlIGlmIChzY2FsZVR5cGUgPT09ICdsaW5lYXInKSB7XG4gICAgc2NhbGUgPSBzY2FsZUxpbmVhcigpXG4gICAgICAucmFuZ2UocmFuZ2UpXG4gICAgICAuZG9tYWluKGRvbWFpbik7XG5cbiAgICBpZiAocm91bmREb21haW5zKSB7XG4gICAgICBzY2FsZSA9IHNjYWxlLm5pY2UoKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoc2NhbGVUeXBlID09PSAnb3JkaW5hbCcpIHtcbiAgICBzY2FsZSA9IHNjYWxlUG9pbnQoKVxuICAgICAgLnJhbmdlKFtyYW5nZVswXSwgcmFuZ2VbMV1dKVxuICAgICAgLmRvbWFpbihkb21haW4pO1xuICB9XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuIl19